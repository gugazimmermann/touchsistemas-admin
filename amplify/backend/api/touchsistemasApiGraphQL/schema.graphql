enum PlansTypes {
	BASIC
	ADVANCED
	SUBSCRIPTION
}

enum PlansFrequency {
	SINGLE
	MONTHLY
}

enum SurveyTypes {
	SINGLE
	MULTIPLE
	TEXT
	MULTILINE
}

enum MethodTypes {
	SMS
	EMAIL
  NONE
}

type Plan @model @auth(rules: [{ allow: public }]) {
	id: ID! @primaryKey(sortKeyFields: ["active"])
	type: PlansTypes! @index(name: "byType", queryField: "planByType")
	name: AWSJSON!
	detail: AWSJSON!
	price: AWSJSON!
  frequency: PlansFrequency!
  active: String! @index(name: "byActive", queryField: "planByActive")
  Subscriptions: [Subscriptions] @hasMany
	Events: [Events] @hasMany
}

type Client @model @auth(rules: [{ allow: public }]) {
	id: ID!
	name: String
	phone: AWSPhone
	doctype: String
	document: String
	email: AWSEmail! @index(name: "byEmail", queryField: "clientByEmail")
	website: AWSURL
	zipCode: String
	state: String @index(name: "byState", queryField: "clientByState")
	city: String
	street: String
	number: String
	complement: String
	logo: String
	eventsMap: [String]
	subscriptionsMap: [String]
	Owners: [Owner] @hasMany(indexName: "byClient", fields: ["id"])
	Events: [Events] @hasMany(indexName: "byClient", fields: ["id"])
	Subscriptions: [Subscriptions] @hasMany(indexName: "byClient", fields: ["id"])
}

type Owner @model @auth(rules: [{ allow: public }]) {
	id: ID! @primaryKey(sortKeyFields: ["name"])
	name: String!
	phone: AWSPhone!
	email: AWSEmail! @index(name: "byEmail", queryField: "ownerByEmail")
	ClientID: ID! @index(name: "byClient")
  Client: Client @belongsTo
}

type Events @model @auth(rules: [{ allow: public }]) {
	id: ID!
	referralCode: String
	method: MethodTypes!
	name: String!
	website: AWSURL
	email: AWSEmail
	zipCode: String!
	state: String! @index(name: "byState", queryField: "eventsByState")
	city: String!
	street: String
	number: String
	complement: String
	logo: String
	dates: [AWSDate]
	gift: Boolean
	giftDescription: String
	prizeDraw: Boolean
	prizeDrawDescription: String
	PlanID: ID! @index(name: "byPlanID", queryField: "eventsByPlanID")
  Plan: Plan @belongsTo
  ClientID: ID! @index(name: "byClient", queryField: "eventsByClientID")
  Client: Client @belongsTo
	PartnerID: ID @index(name: "byPartner", queryField: "eventsByPartnerID")
  Partner: Partner @belongsTo
	Surveys: [Survey] @hasMany(indexName: "byEvents", fields: ["id"])
	Visitors: [Visitor] @hasMany(indexName: "byEvents", fields: ["id"])
}

type Subscriptions @model @auth(rules: [{ allow: public }]) {
	id: ID! @primaryKey(sortKeyFields: ["active"])
	referralCode: String
	name: String!
	website: AWSURL
	email: AWSEmail
	zipCode: String!
	state: String! @index(name: "byState", queryField: "subscriptionsByState")
	city: String!
	street: String
	number: String
	complement: String
	logo: String
  active: String! @index(name: "byActive", queryField: "subscriptionsByActive")
	PlanID: ID! @index(name: "byPlanID", queryField: "subscriptionsByPlanID")
  Plan: Plan @belongsTo
	ClientID: ID! @index(name: "byClient", queryField: "subscriptionsByClientID")
	Client: Client @belongsTo
	PartnerID: ID @index(name: "byPartner", queryField: "subscriptionsByPartnerID")
	Partner: Partner @belongsTo
	Surveys: [Survey] @hasMany(indexName: "bySubscriptions", fields: ["id"])
	Visitors: [Visitor] @hasMany(indexName: "bySubscriptions", fields: ["id"])
}

type Partner @model @auth(rules: [{ allow: public }]) {
	id: ID! @primaryKey(sortKeyFields: ["name"])
	referralCode: String! @index(name: "byReferralCode", queryField: "partnerByReferralCode")
	name: String!
	contact: String! @index(name: "byContact", queryField: "partnerByContact")
	email: AWSEmail! @index(name: "byEmail", queryField: "partnerByEmail")
	phone: AWSPhone!
	zipCode: String!
	state: String! @index(name: "byState", queryField: "partnerByState")
	city: String!
	street: String
	number: String
	Events: [Events] @hasMany(indexName: "byPartner", fields: ["id"])
	Subscriptions: [Subscriptions] @hasMany(indexName: "byPartner", fields: ["id"])
}

type Survey @model @auth(rules: [{ allow: public }]) {
	id: ID! @primaryKey(sortKeyFields: ["order"])
	order: Int!
  type: SurveyTypes!
	question: AWSJSON!
	answers: AWSJSON
	required: Boolean
	EventsID: ID @index(name: "byEvents", queryField: "surveyByEventsID")
	Events: Events @belongsTo
	SubscriptionsID: ID @index(name: "bySubscriptions", queryField: "surveyBySubscriptionsID")
	Subscriptions: Subscriptions @belongsTo
}

type Visitor @model @auth(rules: [{ allow: public }]) {
	id: ID!
	day: AWSDate! @index(name: "byDay", sortKeyFields: ["EventsID", "SubscriptionsID"], queryField: "visitorByDay")
	phone: AWSPhone @index(name: "byPhone", sortKeyFields: ["EventsID"], queryField: "visitorByPhone")
	code: Int
	confirmation: AWSDateTime @index(name: "byConfirmation", sortKeyFields: ["EventsID"], queryField: "visitorByConfirmation")
	codeUsed: AWSDateTime
	authorization: Boolean
	name: String
	email: AWSEmail
	gender: String
	maritalStatus: Boolean
	disabledPerson: String
	state: String
	city: String
	birthdate: AWSDate
	surveyAnswers: AWSJSON
	EventsID: ID @index(name: "byEvents", queryField: "visitorByEventsID")
	Events: Events @belongsTo
	SubscriptionsID: ID @index(name: "bySubscriptions", queryField: "visitorBySubscriptionsID")
	Subscriptions: Subscriptions @belongsTo
}
