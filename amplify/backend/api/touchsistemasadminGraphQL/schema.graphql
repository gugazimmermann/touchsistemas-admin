type Owner @model @auth(rules: [{ allow: public }]) {
	id: ID!
	name: String!
	phone: AWSPhone!
	email: AWSEmail!
	clientID: ID! @index(name: "byClient")
	Client: Client @belongsTo
}

type Client @model @auth(rules: [{ allow: public }]) {
	id: ID!
	name: String
	phone: AWSPhone
	doctype: String
	document: String
	email: AWSEmail! @index(name: "byEmail", queryField: "clientsByEmail")
	website: AWSURL
	zipCode: String
	state: String @index(name: "byState", queryField: "clientsByState")
	city: String
	street: String
	number: String
	complement: String
	eventsMap: Int
	Owners: [Owner] @hasMany(indexName: "byClient", fields: ["id"])
	Events: [Event] @hasMany(indexName: "byClient", fields: ["id"])
}

type Event @model @auth(rules: [{ allow: public }]) {
	id: ID!
	referralCode: String
	plan: String!
	name: String!
	website: AWSURL
	email: AWSEmail
	zipCode: String!
	state: String! @index(name: "byState", queryField: "eventsByState")
	city: String!
	street: String
	number: String
	complement: String
	description: String
	dates: [AWSDate!]!
	gift: Boolean
	giftDescription: String
	prizeDraw: Boolean
	prizeDrawDescription: String
	clientID: ID! @index(name: "byClient", queryField: "eventsByClientID")
	Client: Client @belongsTo
	partnerID: ID @index(name: "byPartner", queryField: "eventsByPartnerID")
	Partner: Partner @belongsTo
	Surveys: [Survey] @hasMany(indexName: "byEvent", fields: ["id"])
	Visitors: [Visitor] @hasMany(indexName: "byEvent", fields: ["id"])
}

type Partner @model @auth(rules: [{ allow: public }]) {
	id: ID!
	name: String!
	contact: String!
	email: AWSEmail!
	phone: AWSPhone!
	referralCode: String! @index(name: "byReferralCode", queryField: "partnersByReferralCode")
	zipCode: String!
	state: String! @index(name: "byState", queryField: "partnersByState")
	city: String!
	street: String
	Events: [Event] @hasMany(indexName: "byPartner", fields: ["id"])
	number: String
}

type Survey @model @auth(rules: [{ allow: public }]) {
	id: ID!
	order: Int!
	question: String! @index(name: "byQuestion", queryField: "surveysByQuestion")
	type: SurveyTypes!
	answers: AWSJSON!
	EventID: ID! @index(name: "byEvent", queryField: "surveysByEventID")
	Event: Event @belongsTo
}

type Visitor @model @auth(rules: [{ allow: public }]) {
	id: ID!
	eventDay: AWSDate! @index(name: "byEventDayAndEventID", sortKeyFields: ["EventID"], queryField: "visitorsByEventDayAndEventID")
	phone: AWSPhone! @index(name: "byPhoneAndEventID", sortKeyFields: ["EventID"], queryField: "visitorsByPhoneAndEventID")
	code: Int!
	confirmation: AWSDateTime @index(name: "byConfirmationAndEventID", sortKeyFields: ["EventID"], queryField: "visitorsByConfirmationAndEventID")
	codeUsed: AWSDateTime
	authorization: Boolean
	name: String
	email: AWSEmail
	gender: String
	maritalStatus: Boolean
	disabledPerson: String
	state: String
	city: String
	birthdate: AWSDate
	surveyAnswers: AWSJSON
	EventID: ID! @index(name: "byEvent", queryField: "visitorsByEventID")
	Event: Event @belongsTo
}

enum SurveyTypes {
	SINGLE
	MULTIPLE
}
